{"version":3,"sources":["app-component/weather.jsx","app-component/form.jsx","App.js","serviceWorker.js","index.js"],"names":["weather","props","className","city","weatherIcon","temp_celsius","min","temp_min","max","temp_max","description","form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","API_Key","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calcelsius","main","temp","get_weatherIcons","id","state","undefined","icon","thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangId","this","Math","floor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f54ee16d.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\n\r\n\r\nconst weather =(props) =>\r\n{\r\n\r\nfunction MinMax(min, max)\r\n    {\r\n        if(min && max)\r\n        {\r\n        return(\r\n            <h2>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n            </h2>\r\n        )\r\n        } \r\n        return null;\r\n    }\r\n\r\n    return(\r\n    <div className=\"contianer text-light\">\r\n        <div className=\"cards pt-4\">\r\n        <h1>\r\n        {props.city}\r\n        </h1>\r\n        <h1>\r\n<i className={`wi ${props.weatherIcon}`}></i>\r\n</h1>\r\n        {props.temp_celsius ? <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1> : null}\r\n        {MinMax(props.temp_min,props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default weather ;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst form = (props) =>\r\n{\r\n\r\n    return(\r\n           <div className=\"container\">\r\n           <div>{props.error ? error() :null}</div>   \r\n        <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" name=\"city\" autoComplete=\"off\" className=\"form-control\" placeholder=\"City\"></input>\r\n\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" name=\"country\" autoComplete=\"off\" className=\"form-control\" placeholder=\"Country\"></input>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\"> \r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n\r\n        \r\n\r\n    );\r\n}\r\n\r\nfunction error()\r\n{\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\"> \r\n            please enter  city and country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default form;","import React, {Component} from 'react';\nimport Weather from './app-component/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport './App.css';\nimport Form from './app-component/form';\n\nconst API_Key=\"05c7ea1b2229b44528679656c577b8c2\";\n\nclass App extends Component\n{\n\n \n  constructor()\n  {\n    super();\n    this.state={city: undefined,\n    country: undefined, \n   icon: undefined, \n  main: undefined, \ncelsius: undefined,\ntemp_max: undefined, \ntemp_min: undefined, \ndescription:\"\", \nerror: false}\n    this.weatherIcon =\n    {\n      thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\", \n      Snow:\"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\n\n  get_weatherIcons(rangId)\n  {\n    switch(true)\n    {\n      case rangId>=200 && rangId <=232 :\n        this.setState({icon: this.weatherIcon.thunderstorm});\n        break;\n      case rangId>=300 && rangId <=321 :\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rangId>=500 && rangId <=531 :\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangId>=600 && rangId <=622 :\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangId>=701 && rangId <=781 :\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangId === 800 :\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangId>=801 && rangId <=804 :\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n        default:\n            this.setState({icon: this.weatherIcon.Clouds});\n\n        \n\n    }\n  }\n\n    getWeather = async(e)=>{\n\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;  \n        if(city && country)\n        {\n          try\n          {\n      const api_call =await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n      const response =await api_call.json();\n      console.log(response);\n      this.setState({city: `${response.name},${response.sys.country}`,celsius: this.calcelsius(response.main.temp),\n      temp_max: this.calcelsius(response.main.temp_max), temp_min: this.calcelsius(response.main.temp_min),\n    description: response.weather[0].description, error: false\n    })\n    this.get_weatherIcons(response.weather[0].id);\n    }\n    catch(error)\n    {console.log(error);}\n  }\n    else\n    {\n      this.setState({error: true})\n    }\n  }\n\n    calcelsius(temp)\n    {\n      let cell = Math.floor(temp-273.15)\n      return cell;\n    }\n\n  \n  render()\n  {\n    return(\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather city={this.state.city} country={this.state.country} temp_celsius={this.state.celsius} \n        temp_max={this.state.temp_max}   temp_min={this.state.temp_min}  description={this.state.description}\n        weatherIcon={this.state.icon}/>\n      </div>\n\n    );\n\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}